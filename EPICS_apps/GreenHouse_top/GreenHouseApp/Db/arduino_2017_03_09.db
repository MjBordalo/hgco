# author: Miguel Bordalo
#
# This document describes all the PV camming from Arduino sensors and actuators
#
#
#
# used fields description:
#	DTYP - Device Type
# INP/OUT - Where to read/write
# DESC - Variable description
# PREC - Display Precision
# SCAN -
# LOPR / HOPR - Low/High Operating Range
# ADEL - Archive Deadband
# PINI - Process at Initialization
# EGU - Engineering units name
# LOLO, LOW, HIGH, HIHI - Alarm Limits
# LLSV, LSV, HSV, HHSV - Alarm Associated severities
# OMSL -	Output Mode Select can be closed_loop or supervisory
#################################################
#		AI - Analog Input
#################################################

#Temperature of first DHT22 Sensor
record(ai, "$(user):Temp1"){
	field(DTYP, "stream")
	field(INP, "@arduino.proto getTemp1() $(PORT)")
	field(DESC, "Scaled Temperature")
	field(SCAN, "2 second")
	field(LOPR, "0")
	field(HOPR, "50")
	field(ADEL, "0.2")
	field(EGU, "C")

	#Alarms
	field(LOLO, "0")
	field(LOW, "15")
	field(HIGH, "35")
	field(HIHI, "40")
	field(LSV, "MAJOR")
	field(HSV, "MAJOR")
}

record(ai, "$(user):Hum1"){
	field(DTYP, "stream")
	field(INP, "@arduino.proto getHum1() $(PORT)")
	field(DESC, " Humidity test")
	field(SCAN, "2 second")
	field(ADEL, "1")
	field(EGU, "%")
}
record(ai, "$(user):Temp2"){
	field(DTYP, "stream")
	field(INP, "@arduino.proto getTemp2() $(PORT)")
	field(DESC, "Scaled Tempreature")
	field(SCAN, "2 second")
	field(ADEL, "0.2")
	field(EGU, "C")
}
record(ai, "$(user):Hum2"){
	field(DTYP, "stream")
	field(INP, "@arduino.proto getHum2() $(PORT)")
	field(DESC, " Humidity test")
	field(SCAN, "2 second")
	field(ADEL, "1")
	field(EGU, "%")
}
record(ai, "$(user):WaterTemp"){
	field(DTYP, "stream")
	field(INP, "@arduino.proto getWaterTemp() $(PORT)")
	field(DESC, " Water temperature  ")
	field(SCAN, "2 second")
	field(ADEL, "1")
	field(EGU, "C")
}

# Raw value commng from Luxemeter sensor with tap reducing its gain
record(ai, "Raw:Lum1"){
	field(DTYP, "stream")
	field(INP, "@arduino.proto getLum() $(PORT)")
	field(DESC, "Raw Lux Sensor reading")
	field(SCAN, "2 second")
	field(ADEL, "1")
	field(PINI, "YES")
	field(EGU, "rawLux")
}


#################################################
#		AO - Analog Output
#################################################

record(ao, $(user):Apperture) {
    field(DESC, "Servo motor set variable")
    field(DTYP, "stream")
    field(OUT, "@arduino.proto setServo() $(PORT)")
    field(DRVL, "0")
    field(DRVH, "170")
		field(LOPR, "-5")
		field(HOPR, "180")	#High Operating Range
		field(ADEL, "1")
		field(EGU, "servo angle")

		field(SCAN, "2 second")
		
		#Set PID link
		field(DOL, "$(user):TempPID MS")
		field(OMSL,"closed_loop")

		# When PID is INVALID, go back to 0
		field(IVOA, "Set output to IVOV")
		field(IVOV, "1")
}


#################################################
#		Calc - Variables based on calculations
#################################################
record(calc, "$(user):Lum1")
{
	field(INPA, "Raw:Lum1")
	field(CALC, "nint(11.92*A)")

	field(DESC, " Calibrated Lux Sensor reading")
	field(SCAN, "2 second")
	field(PINI, "YES")
	field(EGU, "Lux")
	#field(PREC, "6")
	field(ADEL, "10")

	field(LOPR, "0")
	field(HOPR, "120000")	#High Operating Range
}


# Error computationâ€™ s SCAN drives the rest
record(calc, "$(user):TempError")
{
		field(DESC, "Temperature Error")
		field(SCAN, "2 second")
		field(INPA, "$(user):Temp1")
		field(INPB, "$(user):TempSetpoint")
		field(CALC, "A-B")
		field(PREC, "1")
}

record(calc, "$(user):TempPID")
{
		field(DESC, "GreenHouse Temp PID")
		field(PREC, "0.1")
		field(SCAN, "2 second")

		field(LOPR, "0")
		field(HOPR, "170")
		field(INPA, "40")			#Kp
		field(INPB, "$(user):TempError")
		field(CALC, "A*B")

}

###################################
# Setpoints
###################################
record(ao, "$(user):TempSetpoint")
{
	field(SCAN, "2 second")
	field(DRVH, "40")
	field(DRVL, "10")
	field(DOL, "20")
	field(PINI, "YES")
}

#################
# Pi
#############
#record (stringin, $(user):PiTemp {
#    field (DTYP, "stream")
#    field (INP,  "@arduino.proto getPiTemp() $(PORT)")
#}
